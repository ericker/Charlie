# -*- coding: utf-8 -*-
"""
corsi: Spatial memory test

This test is based on the original Corsi test of spatial-memory span [1], but
contains several improvements and other features. There are three main portions
or conditions to the test, named 'simultaneous', 'forward', and 'sequence'.
Each condition contains practice and test trials.

On each trial in the 'simultaneous' condition, the proband first sees several
randomly distributed non-overlapping squares. For a brief study period, circles
appear in half of the squares. Probands report the positions of the circles by
clicking on the squares that contained them, in any order. The trial ends when
the proband has clicked all the correct squares, or as soon as an incorrect
square is clicked. A trial will alternatively time out after 2 minutes. During
the test phase, the number of circles per trial begins at 2 and increases by 1
after three consecutive trials, up to a maximum of 14. If the proband gets all
three trials with the same number of circles incorrect, the condition will end.
There are always double the number of squares as circles. This condition is
intended to be a straight test of spatial working-memory capacity without the
additional demands of retaining the temporal order of events. Pilot work
suggests that it is considerably easier than the traditional Corsi test (see
below).

On each trial in the 'forward' condition, the proband again sees several
squares. Circles then appear in half of the squares, one by one. Probands
report the positions of the circles in the same order that they were presented.
This condition is the same as the previous one in all other respects. This
condition is intended to reflect the original Corsi design, but with a few
minor improvements.

On each trial in the 'sequence' condition, both circles and crosses appear in
the squares, one by one. Probands report the order of the circles, then the
order of the crosses. This condition is intended to be the spatial analogue of
the letter-number sequencing test of working memory from the WAIS [2]. Pilot
work suggests that it is considerably more difficult than the forward
condition.

Previous work has generally concluded that the reverse-reporting version of the
Corsi produces the same results as the forward-reporting version [3]. I found
the same thing when conducting pilot testing, so this is not included.

The major differences between this version and the traditional Corsi test are
as follows:

1. This version contains 'simultaneous' and 'sequence' conditions.
2. There are 2 * n squares on the screen, rather than always 9.
3. There is a mandatory 4-s pause between the study period and the response
period. For the first 2 s, the squares are still visible, and for the latter 2
s, the squares are removed. This makes it more likely that probands will use
working memory (rather than e.g., iconic memory) to perform the task.
4. n goes up to 14, in the unlikely event that a subject has a capacity > 9.

Time taken: ?

Summary statistics:

    [condition]_[n]_ncorrect : Number of trials correct (maximum = 3).
    [condition]_[n]_rtmean : Mean RT to complete a trial.
    [condition]_rtmean : As above.
    [condition]_[n]_rtmean_first : Mean RT to make first response.
    [condition]_rtmean_first : As above.
    [condition]_k33 : Largest n for which at least 1 trial was correct.
    [condition]_k66 : Largest n for which at least 2 trials were correct.
    [condition]_k100 : Largest n for which 3 trials were correct.

References:

[1] Corsi P.M. (1972). Human memory and the medial temporal region of the
brain. Dis Abstr Intl, 34, 891B.

[2] The Psychological Corporation. (1997). WAIS-III/WMS-III technical manual.
San Antonio, TX: The Psychological Corporation.

[3] Berch D.B., Krikorian R., & Huha E.M. (1998). The Corsi block-tapping task:
Methodological and theoretical considerations. Brain Cogn, 38, 317â€“338.
"""
# TODO: Add time estimate.

__version__ = 1.0
__author__ = 'Sam Mathias'

import charlie.tools.data as data
import charlie.tools.summaries as summaries
import charlie.tools.batch as batch
import charlie.tools.audio as audio
import charlie.tools.visual as visual
import charlie.tools.events as events

test_name = 'corsi'
output_format = [
    ('proband_id', str), ('test_name', str), ('condition', str),
    ('phase', str), ('trialn', str), ('n', int), ('positions', str),
    ('symbols', str), ('correct', int), ('rt', int), ('responses', str),
    ('rt_first', int)
]
conditions = ['simultaneous', 'forward', 'sequence']
ns = [n for n in xrange(2, 15) for i in xrange(3)]
pre_trial_dur = 2
study_dur = 0.5
wipe_dur = 0.5
timeout = 120
trials_per_n = 3
symbols = {
    'forward': {
        'test': [
            'cc', 'cc', 'cc', 'ccc', 'ccc', 'ccc', 'cccc', 'cccc', 'cccc',
            'ccccc', 'ccccc', 'ccccc', 'cccccc', 'cccccc', 'cccccc', 'ccccccc',
            'ccccccc', 'ccccccc', 'cccccccc', 'cccccccc', 'cccccccc',
            'ccccccccc', 'ccccccccc', 'ccccccccc', 'cccccccccc', 'cccccccccc',
            'cccccccccc', 'ccccccccccc', 'ccccccccccc', 'ccccccccccc',
            'cccccccccccc', 'cccccccccccc', 'cccccccccccc', 'ccccccccccccc',
            'ccccccccccccc', 'ccccccccccccc', 'cccccccccccccc',
            'cccccccccccccc', 'cccccccccccccc'
        ],
        'practice': ['cc', 'cc']
    },
    'simultaneous': {
        'test': [
            'cc', 'cc', 'cc', 'ccc', 'ccc', 'ccc', 'cccc', 'cccc', 'cccc',
            'ccccc', 'ccccc', 'ccccc', 'cccccc', 'cccccc', 'cccccc', 'ccccccc',
            'ccccccc', 'ccccccc', 'cccccccc', 'cccccccc', 'cccccccc',
            'ccccccccc', 'ccccccccc', 'ccccccccc', 'cccccccccc', 'cccccccccc',
            'cccccccccc', 'ccccccccccc', 'ccccccccccc', 'ccccccccccc',
            'cccccccccccc', 'cccccccccccc', 'cccccccccccc', 'ccccccccccccc',
            'ccccccccccccc', 'ccccccccccccc', 'cccccccccccccc',
            'cccccccccccccc', 'cccccccccccccc'],
        'practice': ['cc', 'cc']
    }, 'sequence': {
        'test': [
            'cx', 'cx', 'cx', 'xcx', 'cxx', 'cxx', 'cxxc', 'cxcx', 'cxcx',
            'cxxcc', 'cxcxx', 'xxccx', 'xccxcx', 'cxcxxc', 'ccxxxc', 'xxcxccx',
            'xxcxccc', 'cxcxxcx', 'xcxxxccc', 'xxxcxccc', 'xcccxcxx',
            'xcxcccxxx', 'xxxccccxc', 'cxxccxxcc', 'xccxxcxccx', 'xcxxccccxx',
            'xxxccccxcx', 'xcccxcxxcxc', 'xcxxxccxccc', 'xxcccccxxxc',
            'xxccxxcccxxc', 'xxccxccxxxcc', 'xccxxxxccxcc', 'xxcxxxccxcccx',
            'xccccxcxxxxcc', 'xcccxxcccxxxc', 'xxcccxxccxcxcx',
            'cxxccccxxxxccx', 'cxxxxxcccccxxc'],
        'practice': ['cx', 'xc', 'xcc', 'cxc']
    }
}
positions = {'forward': {
    'test': [[(-217, -104), (-214, 227), (-54, 123), (-52, 204)],
             [(-243, 262), (102, 18), (-179, -182), (252, -188)],
             [(-130, -36), (202, -240), (247, 121), (-185, 238)],
             [(-203, 180), (24, -213), (199, -196), (247, 253), (-104, 87),
              (-182, -96)],
             [(-259, 243), (136, 116), (-77, -137), (-45, 183), (-213, -271),
              (-109, -238)],
             [(29, -275), (-243, -2), (254, 275), (-100, 168), (3, -33),
              (-243, -191)],
             [(-36, -257), (-129, -94), (-128, 254), (-79, -17), (141, 297),
              (-131, -253), (-210, 37), (-235, -55)],
             [(-218, -129), (-72, -41), (276, 285), (102, -163), (-186, 26),
              (-260, 138), (106, -34), (-181, 147)],
             [(-83, 98), (-175, 105), (158, -199), (14, -32), (263, -80),
              (265, 227), (-15, -235), (261, 93)],
             [(211, -69), (-16, 194), (290, -229), (-237, -80), (-168, 30),
              (128, -253), (-159, -226), (-28, -24), (84, -88), (208, 156)],
             [(43, -237), (-207, -84), (14, 201), (-56, -26), (264, -291),
              (235, 150), (-107, -246), (44, 120), (94, -136), (-287, 211)],
             [(212, -65), (-272, 196), (-190, 278), (70, -86), (60, -247),
              (134, -240), (-198, -287), (-159, 113), (-6, -49), (-15, -254)],
             [(-12, -88), (-121, -220), (246, -157), (164, -286), (-108, 79),
              (256, 112), (139, 142), (-296, -22), (-4, 15), (189, -79),
              (-179, -137), (160, 213)],
             [(298, 270), (148, 116), (186, -52), (-19, 265), (-215, 5),
              (254, 145), (56, 17), (-40, -213), (-169, 283), (-76, 45),
              (-270, -276), (-50, -57)],
             [(-69, -90), (198, 198), (-281, -94), (33, 6), (121, 202),
              (-167, -84), (299, 157), (-92, -210), (129, -175), (248, 28),
              (-146, 162), (-11, 212)],
             [(-48, -80), (70, 194), (153, -263), (228, 58), (-265, -269),
              (-11, 28), (-284, -75), (-262, 17), (-180, -128), (-154, 4),
              (14, -213), (145, 85), (281, 194), (238, -51)],
             [(-153, -173), (148, -65), (-267, -185), (-127, 166), (219, 105),
              (-99, -11), (-272, 2), (-183, 242), (-160, 71), (224, 227),
              (178, 22), (130, 137), (-61, 95), (-43, -135)],
             [(215, -35), (-177, -108), (-72, -76), (225, 256), (-84, -187),
              (116, -273), (73, 61), (-281, 252), (-277, -164), (-300, 103),
              (-266, -2), (-150, 200), (247, -152), (-182, 99)],
             [(-224, -118), (-94, -103), (-197, 233), (200, 170), (281, 266),
              (-229, -193), (205, -242), (187, -71), (-124, 255), (-118, 33),
              (253, 33), (-183, -46), (139, 252), (279, -66), (57, -225),
              (-56, -249)],
             [(274, 133), (265, -80), (-60, 99), (-213, -127), (-86, -177),
              (84, -201), (-200, 73), (111, 225), (11, -140), (128, 45),
              (-175, -265), (-165, -56), (179, -56), (218, 207), (37, 291),
              (290, -191)],
             [(-46, 111), (-183, -98), (89, 27), (281, 273), (284, 68),
              (181, 136), (203, 10), (-93, -92), (-248, 241), (-253, 116),
              (55, -223), (28, -127), (-116, 181), (168, -300), (-105, -245),
              (-234, -298)],
             [(-128, 169), (198, 289), (276, 271), (245, -158), (240, 197),
              (-53, -121), (55, -42), (-42, 174), (217, -239), (-253, 230),
              (-127, -142), (48, 150), (164, 6), (-111, 289), (-56, -191),
              (-271, -261), (103, 225), (-142, -69)],
             [(276, -197), (262, 32), (156, 213), (-2, -141), (165, 104),
              (173, -229), (20, 176), (-228, 276), (-15, 73), (-200, 85),
              (39, -26), (-21, -214), (-95, -291), (-177, -298), (-35, -40),
              (14, 261), (136, 31), (263, -112)],
             [(69, 195), (-184, 53), (-26, -6), (-210, 233), (156, -68),
              (200, 215), (212, -213), (84, 267), (109, 125), (-111, 208),
              (217, 103), (71, -140), (52, -30), (-299, -44), (-25, -289),
              (-41, 224), (-189, -271), (-145, -107)],
             [(-23, -137), (247, -96), (126, -282), (9, 234), (118, -212),
              (-213, 157), (-276, -273), (2, -19), (-289, 109), (164, 33),
              (281, -239), (-178, -279), (61, 144), (-192, -130), (-72, 285),
              (73, 41), (108, 299), (251, 223), (225, 115), (-81, 132)],
             [(-262, -289), (-80, -99), (-268, -162), (-268, 273),
              (-135, -202), (202, -270), (87, 73), (18, 246), (30, -114),
              (-278, 42), (9, 73), (-105, 130), (-250, -33), (165, -72),
              (180, -163), (-93, 299), (30, -221), (-143, -20), (86, 158),
              (241, 183)],
             [(-245, -293), (296, 241), (-32, -44), (202, -113), (-50, -236),
              (-204, 21), (-211, 105), (273, -135), (229, 12), (87, 131),
              (-150, 234), (177, -275), (-162, -236), (249, 108), (-64, -120),
              (-240, -201), (-268, -66), (276, -263), (-17, 204), (-271, 204)],
             [(-171, 255), (-112, -123), (-142, -28), (94, -223), (-258, -5),
              (-297, 112), (-241, 282), (-238, -283), (28, 280), (74, -78),
              (-24, -296), (205, 270), (-40, -163), (200, 147), (-156, 177),
              (-21, 65), (202, -40), (237, -182), (273, 24), (94, 177),
              (-182, -190), (-217, 83)],
             [(-159, -37), (84, 292), (227, -279), (-102, 51), (38, -50),
              (256, 150), (-46, -149), (223, -152), (-55, -297), (153, 206),
              (-226, 204), (-5, 203), (-262, -127), (-161, -230), (-107, 290),
              (147, -248), (25, 69), (-122, 210), (-231, -2), (46, -158),
              (133, 136), (106, 40)],
             [(-299, -45), (-66, -131), (267, 10), (112, 165), (-180, -233),
              (32, 256), (-298, 293), (229, -161), (109, 295), (-190, 79),
              (139, -289), (48, 90), (292, 288), (-235, -119), (-15, -14),
              (49, -256), (-176, -15), (-226, 178), (62, -13), (96, -185),
              (206, 106), (-114, 159)],
             [(-111, -284), (56, -41), (-34, -54), (73, -117), (2, -140),
              (163, 118), (72, -251), (-241, -239), (-252, 43), (-37, 51),
              (86, 141), (222, -157), (293, -238), (291, 107), (-159, 181),
              (271, -9), (121, 274), (-282, 211), (-57, 132), (-46, 260),
              (-289, -50), (257, 202), (-238, -132), (192, -227)],
             [(66, 161), (-80, 161), (-105, -283), (41, -86), (-281, -119),
              (-243, 229), (-283, 144), (299, -79), (23, 291), (-95, -6),
              (-202, -65), (-260, 51), (202, 79), (191, -16), (-97, -145),
              (26, 74), (226, 284), (-264, -232), (78, -179), (171, -257),
              (226, -127), (-148, 235), (6, -245), (80, -261)],
             [(113, 162), (-140, 168), (215, 107), (-246, 71), (34, 134),
              (209, -54), (-45, 124), (221, 187), (110, 12), (-263, 0),
              (-64, 219), (-177, -81), (-3, -271), (283, -26), (-89, -175),
              (142, -230), (-276, 247), (225, -172), (278, 258), (294, -246),
              (141, -136), (-152, 62), (-151, 298), (206, 31)],
             [(-103, 98), (-277, -216), (46, 153), (278, 286), (249, 65),
              (240, -104), (-163, -283), (-238, -60), (16, -261), (-164, -187),
              (81, -15), (165, -48), (-49, -172), (146, 117), (-184, 289),
              (-32, 116), (65, -104), (117, 231), (297, -269), (39, -181),
              (-32, -75), (109, -203), (175, 38), (-202, 22), (-258, 157),
              (-109, -55)],
             [(2, 86), (-91, -114), (212, -113), (-5, -237), (161, 24),
              (-152, -227), (-228, 260), (-152, 202), (-182, 123), (117, 171),
              (234, -23), (-20, -78), (45, 244), (-265, -52), (-285, -263),
              (-267, 115), (277, 91), (-28, 234), (269, 239), (118, -270),
              (116, -148), (-99, 2), (-286, -177), (214, -214), (-175, -12),
              (121, 281)],
             [(-139, 116), (-152, -130), (192, -73), (143, 294), (-228, 208),
              (-254, -170), (164, -171), (271, 35), (-15, 154), (-60, -189),
              (183, 197), (282, -107), (177, 41), (-149, -15), (74, -121),
              (105, 196), (-156, 257), (2, 77), (268, 270), (270, -183),
              (-211, -278), (56, 5), (248, 115), (-237, -49), (-21, -268),
              (-281, -293)],
             [(-10, 3), (-199, 16), (-129, 264), (28, -268), (148, -3),
              (-88, 99), (69, -175), (127, -276), (160, 147), (211, 250),
              (74, 30), (-291, -203), (264, -214), (-214, -203), (282, 86),
              (-77, -178), (228, -56), (-101, 4), (-228, -288), (-298, 140),
              (-187, 104), (290, 238), (19, -75), (-122, -95), (-208, 212),
              (275, -299), (34, 257), (174, -198)],
             [(64, -42), (-202, -172), (32, 279), (-86, 72), (236, -87),
              (-50, -185), (-284, 115), (143, 288), (56, 42), (2, 170),
              (-31, -43), (-236, -288), (-167, 23), (271, 4), (192, 52),
              (-207, 137), (-125, -105), (235, 240), (-77, 161), (-6, -264),
              (212, -236), (164, 161), (-294, -162), (-278, 27), (144, -93),
              (251, -160), (-151, -247), (133, -217)],
             [(-125, 215), (60, 288), (-185, -259), (-19, -185), (74, 203),
              (61, 88), (268, -60), (168, -237), (-154, -113), (78, -286),
              (261, 36), (147, 269), (-144, 127), (-56, -31), (-300, 39),
              (-92, -224), (125, -71), (2, -280), (-230, 130), (264, 284),
              (-30, 239), (-294, 266), (189, 181), (141, 42), (253, -242),
              (-213, 239), (-48, 92), (219, -163)]],
    'practice': [[(22, -157), (223, -87), (-19, 229), (-248, 280)],
                 [(-236, -182), (-215, 155), (235, -217), (21, 238)]]},
             'simultaneous': {
                 'test': [[(153, -282), (-201, 292), (141, -30), (-130, -168)],
                          [(-134, 7), (74, -23), (117, 278), (-212, -166)],
                          [(212, -254), (-274, 53), (59, 269), (-167, -191)],
                          [(-140, 292), (-122, -187), (17, -288), (-81, -60),
                           (244, -219), (298, 270)],
                          [(19, 212), (48, -166), (-262, -116), (208, -16),
                           (260, -189), (-244, 30)],
                          [(-185, 20), (219, 240), (20, 215), (25, -167),
                           (-250, 187), (190, 141)],
                          [(-154, -51), (145, 144), (293, -244), (-6, 248),
                           (-264, 153), (-255, -295), (-51, 122), (22, -77)],
                          [(-139, -26), (63, 131), (-163, -273), (152, 165),
                           (-278, 37), (-22, 30), (299, -15), (114, 22)],
                          [(-221, -190), (-228, -260), (71, -233), (-193, -95),
                           (-60, -228), (234, -97), (287, -4), (191, 204)],
                          [(-87, -8), (137, 236), (41, 279), (177, 47),
                           (-274, 74), (193, -221), (-165, -51), (115, 141),
                           (-2, -104), (-274, -174)],
                          [(-106, 180), (83, -239), (124, -167), (248, 97),
                           (152, 229), (-190, -248), (2, -37), (-50, -190),
                           (-184, 13), (216, -139)],
                          [(-175, 173), (-285, -16), (-63, 233), (22, -298),
                           (57, -156), (92, 107), (202, -232), (-252, 118),
                           (-153, -182), (214, 123)],
                          [(-159, 105), (238, 16), (-231, 219), (39, -80),
                           (-56, -125), (-14, -298), (73, 31), (-136, 180),
                           (243, -71), (-46, 225), (-251, -200), (98, 240)],
                          [(-161, -218), (22, 270), (-152, 132), (-64, -96),
                           (124, -224), (-255, 231), (131, -126), (275, 250),
                           (-18, -167), (-250, 161), (-9, 41), (131, 273)],
                          [(172, 284), (-139, 77), (-89, -61), (-36, -191),
                           (297, 53), (174, -254), (-37, -271), (50, -134),
                           (298, 279), (63, 224), (-276, -128), (168, -6)],
                          [(-231, 39), (218, -88), (-293, -156), (-224, -255),
                           (110, 37), (-96, 182), (-99, -237), (154, -211),
                           (169, 194), (74, 256), (14, -236), (-134, 270),
                           (184, 55), (-92, 106)],
                          [(-242, -57), (199, 214), (18, 34), (243, -82),
                           (-100, 230), (-247, 69), (127, -4), (-98, -65),
                           (143, -253), (-44, -232), (-226, -146), (46, -64),
                           (-19, 214), (-206, -222)],
                          [(-6, 15), (148, -42), (23, 175), (-78, -150),
                           (217, -204), (193, 73), (-299, 173), (288, -80),
                           (23, 285), (-139, -266), (-232, -148), (-270, -34),
                           (-161, 235), (5, -153)],
                          [(276, 207), (-59, 54), (-147, -109), (-144, 182),
                           (75, -261), (269, -198), (78, -70), (188, 117),
                           (-90, 274), (-281, 130), (243, 287), (218, -126),
                           (-166, -28), (4, 215), (-144, 53), (-231, -216)],
                          [(-183, 250), (-96, -290), (-239, -63), (250, -171),
                           (70, -98), (-245, 158), (-195, 75), (168, 159),
                           (167, -215), (-53, 19), (-151, 166), (53, 244),
                           (-40, 119), (142, -130), (-152, -218),
                           (-254, -159)],
                          [(-87, 168), (194, 266), (-18, -46), (-209, -258),
                           (-31, -126), (91, -166), (212, -188), (-265, 250),
                           (-138, -43), (-276, -41), (175, -42), (56, -29),
                           (-236, 112), (210, -112), (130, -300), (-156, 282)],
                          [(23, -5), (265, 88), (-201, -150), (-66, 19),
                           (-199, -225), (210, -74), (-258, 293), (52, 111),
                           (-289, -263), (241, 234), (215, -207), (-265, 103),
                           (20, 272), (-189, -13), (159, 72), (-114, -159),
                           (104, 198), (-177, 61)],
                          [(-14, 262), (61, -121), (-220, 65), (132, 156),
                           (184, 292), (258, 114), (33, -50), (247, 221),
                           (261, -217), (115, 3), (-229, -103), (44, 177),
                           (43, -256), (-197, -14), (184, -215), (-132, -145),
                           (-291, 134), (-99, 265)],
                          [(-69, -172), (-116, 277), (-210, 136), (163, -293),
                           (-205, 59), (298, 150), (259, -106), (-106, -269),
                           (46, 121), (34, 42), (-35, 293), (139, 264),
                           (-287, 243), (97, -167), (-63, 159), (-96, -89),
                           (279, 283), (206, -222)],
                          [(-50, -153), (125, 174), (65, -163), (195, 286),
                           (-237, -45), (86, 60), (240, -215), (160, -204),
                           (-249, -148), (-201, 185), (-164, -283),
                           (261, -122), (191, -285), (112, -73), (-24, 181),
                           (-189, 292), (56, 248), (-127, 137), (-278, -282),
                           (-8, -291)],
                          [(214, -140), (-55, -129), (-189, 139), (92, -78),
                           (-6, 27), (228, -211), (-288, 131), (-261, -272),
                           (219, 157), (286, -97), (46, 278), (129, -270),
                           (-52, -44), (-222, 40), (-134, -184), (240, -286),
                           (-3, 127), (299, 256), (-259, 257), (195, 71)],
                          [(-238, -227), (111, -75), (76, 68), (294, 282),
                           (-85, 19), (-37, 164), (280, -89), (-231, 88),
                           (-259, -27), (18, -108), (298, 165), (204, 62),
                           (138, 295), (-95, -196), (-210, -119), (81, 146),
                           (182, -48), (-292, -299), (-103, -293), (51, -222)],
                          [(174, -18), (-143, -183), (19, -151), (-161, 291),
                           (-244, -27), (-62, 175), (86, 210), (242, -134),
                           (83, 294), (274, -24), (-157, -263), (21, 98),
                           (-248, -284), (-213, 69), (261, 184), (-239, -137),
                           (-295, 258), (155, -107), (204, -256), (56, -228),
                           (156, 259), (274, -279)],
                          [(27, 177), (-194, 178), (-122, 56), (260, -174),
                           (-239, -104), (185, 180), (158, -182), (234, 72),
                           (68, -275), (182, -103), (197, 278), (-75, -255),
                           (-188, 277), (98, 223), (-262, 258), (206, -281),
                           (190, -11), (106, 77), (58, -22), (273, -76),
                           (-81, 245), (-192, -280)],
                          [(0, 222), (152, -42), (-138, 172), (49, 62),
                           (-39, 126), (-58, 2), (-80, -106), (-32, -185),
                           (84, -235), (-273, -17), (160, 103), (114, -157),
                           (-116, 250), (-190, -195), (239, -150),
                           (-104, -207), (-246, 298), (58, -76), (-297, 91),
                           (-246, -99), (233, 18), (-211, 103)],
                          [(-94, 21), (84, -222), (-66, -279), (255, -195),
                           (130, 114), (217, -271), (-1, -139), (-230, -136),
                           (34, 188), (-197, 112), (152, -152), (-285, -251),
                           (-46, 268), (207, 190), (277, -83), (279, 175),
                           (291, 258), (-256, 19), (-157, 237), (-112, -188),
                           (39, -49), (-67, 133), (260, 37), (-281, 177)],
                          [(-28, 119), (-242, 53), (129, 156), (-10, 240),
                           (-125, 285), (-220, 173), (-217, -121), (271, 40),
                           (-279, -298), (78, 245), (-146, 23), (69, -126),
                           (250, -251), (171, -41), (158, 54), (293, 272),
                           (41, -285), (184, 233), (-271, -39), (-141, -263),
                           (-147, 95), (-288, -145), (-87, -76), (296, -119)],
                          [(118, 178), (70, 57), (-25, 259), (149, 19),
                           (-136, -191), (-253, -214), (19, 135), (181, -178),
                           (-174, 135), (223, 15), (-43, -205), (298, -132),
                           (-299, -143), (118, -93), (291, -299), (100, -220),
                           (221, 262), (-237, 43), (-86, -41), (174, -281),
                           (42, -142), (-4, -290), (-156, -50), (-101, 274)],
                          [(-154, 279), (81, 87), (185, -132), (66, -261),
                           (-204, -241), (-178, 136), (-279, 222), (196, -11),
                           (-77, 290), (38, 182), (71, -20), (-29, -115),
                           (-80, 200), (-43, -297), (-118, -108), (199, -220),
                           (238, 266), (-288, -72), (198, 67), (-232, 6),
                           (-105, -22), (-210, -97), (57, 291), (275, -300),
                           (44, -127), (272, -155)],
                          [(-288, 223), (54, -10), (-55, -164), (267, 167),
                           (-232, -214), (194, -125), (262, 5), (162, 288),
                           (-23, 237), (-118, 283), (174, -271), (272, 287),
                           (63, -289), (-200, -58), (26, -137), (-121, 0),
                           (-290, -58), (135, 128), (-136, -135), (278, -93),
                           (183, 55), (-224, 102), (-300, 60), (-294, -144),
                           (297, -186), (-52, -72)],
                          [(-112, -145), (103, 147), (-289, 235), (-255, 58),
                           (-181, 60), (68, 280), (-183, -112), (232, 294),
                           (235, -52), (-5, 292), (175, 157), (40, -79),
                           (-209, 218), (206, 43), (-90, -218), (43, -160),
                           (-276, -232), (-134, -31), (-192, -197), (-24, 12),
                           (-197, -291), (158, -189), (151, 279), (-76, 115),
                           (-261, -116), (-21, 205)],
                          [(-19, -120), (155, 223), (284, -230), (66, -230),
                           (-72, 275), (216, 64), (-252, -126), (-228, 18),
                           (-48, -296), (-133, 168), (-206, 255), (159, -172),
                           (18, 240), (158, -41), (-282, 145), (-203, -213),
                           (-3, 35), (277, -100), (-83, 48), (-100, -77),
                           (-288, -270), (-172, -297), (-177, -87), (71, 6),
                           (78, -73), (242, 287), (285, 184), (-17, -191)],
                          [(-69, -229), (83, 105), (-174, 193), (123, -296),
                           (217, -251), (16, -272), (131, -60), (-297, 169),
                           (78, -182), (-289, 245), (237, -93), (-38, 160),
                           (219, 101), (-130, 76), (-53, 66), (156, 30),
                           (-36, -117), (297, 75), (64, 203), (-243, -192),
                           (-230, -23), (-3, -44), (-112, -56), (178, 240),
                           (258, 220), (-173, -205), (-194, -105), (-73, 237)],
                          [(146, 141), (-267, -235), (124, -34), (-20, -162),
                           (228, -210), (23, 29), (-47, -39), (168, 281),
                           (83, -221), (-284, -28), (39, 168), (248, 102),
                           (287, 269), (-146, 171), (234, 21), (-72, 237),
                           (-187, 33), (208, -280), (-6, -286), (32, 286),
                           (-295, 272), (-229, -98), (282, 197), (-172, 256),
                           (-128, -174), (-156, -257), (136, 63), (-60, 107)]],
                 'practice': [
                     [(-194, -114), (255, -160), (-285, 153), (-269, -186)],
                     [(-172, -232), (284, -290), (197, -120), (-299, 119)]]},
             'sequence': {
                 'test': [[(20, 205), (-110, -74), (-260, -54), (-297, 83)],
                          [(-151, -103), (-216, 77), (85, -284), (264, 73)],
                          [(-132, 279), (232, 79), (272, -77), (-295, -138)],
                          [(296, 140), (158, 54), (178, 127), (53, 156),
                           (-79, -19), (218, -148)],
                          [(-247, -229), (-222, -54), (-123, -98), (58, 248),
                           (203, -6), (60, -51)],
                          [(250, -55), (228, -137), (-8, -166), (75, 208),
                           (-20, 117), (-208, -43)],
                          [(103, 51), (22, -61), (141, 170), (-69, -63),
                           (110, -274), (87, 275), (-89, 202), (-158, 72)],
                          [(19, -100), (78, 196), (257, -203), (-289, -160),
                           (231, -105), (100, -75), (-160, -155), (-142, 139)],
                          [(-61, -184), (-78, 24), (286, 182), (81, -121),
                           (-252, -11), (-293, 262), (-57, 251), (255, 262)],
                          [(62, -65), (-119, -104), (-212, 105), (-103, 123),
                           (140, -11), (61, 208), (96, -144), (276, 185),
                           (185, -257), (21, -160)],
                          [(239, 79), (140, -16), (-254, -54), (253, -36),
                           (-140, -83), (-113, -245), (-291, 101), (204, -290),
                           (-206, 157), (48, 7)],
                          [(34, 233), (-51, -259), (-268, 137), (-189, -237),
                           (168, -102), (-65, 225), (-226, -94), (-158, 103),
                           (170, 5), (296, -263)],
                          [(-214, -130), (214, 122), (110, -96), (-255, -7),
                           (49, 99), (72, -199), (-74, 114), (200, -290),
                           (-285, 124), (-226, 246), (102, 222), (-6, -13)],
                          [(-142, -158), (249, -52), (-57, 248), (-87, 4),
                           (37, 237), (114, 170), (115, -80), (-84, 162),
                           (-235, 238), (216, 56), (223, 239), (13, 33)],
                          [(-6, 86), (241, -210), (57, -104), (-193, 265),
                           (125, 47), (41, 199), (-284, 236), (175, 227),
                           (146, 133), (216, 118), (48, 290), (-183, -208)],
                          [(-20, -28), (148, -22), (94, 238), (270, -148),
                           (201, 280), (-180, 54), (207, 148), (128, -212),
                           (-237, 269), (134, -138), (-229, -48), (-10, -113),
                           (-273, -129), (83, 68)],
                          [(-135, 63), (293, 153), (31, -216), (127, -81),
                           (146, 188), (-103, 194), (56, 0), (255, -160),
                           (-241, 182), (-102, -67), (-113, 275), (164, 103),
                           (-291, 74), (173, -173)],
                          [(-196, -141), (-288, 72), (-93, -82), (259, 181),
                           (211, -296), (-106, 222), (-184, 238), (204, -109),
                           (107, 174), (185, 247), (125, -179), (-31, -222),
                           (190, 8), (54, -263)],
                          [(-8, -286), (131, -280), (-22, -25), (-182, 222),
                           (-59, 267), (96, -169), (81, 196), (-190, -202),
                           (-192, -40), (263, -188), (-7, -123), (4, 155),
                           (-173, -275), (-250, 293), (-81, -99), (214, 96)],
                          [(-131, -289), (236, -131), (-171, 265), (115, -174),
                           (106, 236), (40, 100), (238, 236), (-109, -99),
                           (-238, 20), (-20, -143), (-282, 234), (-116, 25),
                           (-131, 98), (-241, -264), (-265, 104), (3, -44)],
                          [(117, -35), (289, 193), (15, -299), (-224, 7),
                           (-161, 160), (14, 146), (-105, -144), (45, 245),
                           (-265, -111), (285, 265), (34, -172), (144, 146),
                           (197, -58), (208, -225), (-288, -288), (-128, 60)],
                          [(-16, 109), (-30, -143), (290, -182), (109, -202),
                           (-190, -82), (-188, 132), (-185, -291), (107, 211),
                           (-265, 194), (-298, 274), (-247, 45), (-68, 292),
                           (-115, -98), (-274, -67), (274, 38), (-270, -191),
                           (116, 15), (209, -200)],
                          [(119, 251), (-297, 233), (-218, -34), (-70, 237),
                           (-126, 93), (249, -20), (-223, -233), (175, 90),
                           (98, -265), (272, -299), (-131, -200), (-134, -67),
                           (-30, -233), (192, 245), (-17, -83), (76, 13),
                           (-7, 14), (-143, 280)],
                          [(-96, -230), (108, 235), (-178, 114), (151, -159),
                           (218, -297), (-133, 259), (-132, -136), (-41, 236),
                           (282, 239), (129, -66), (-48, 21), (293, 136),
                           (259, -21), (272, -181), (195, 268), (-2, 105),
                           (-298, -144), (-216, 29)],
                          [(-280, -197), (8, -205), (146, -201), (-74, -73),
                           (286, 145), (-99, 289), (249, -278), (82, -98),
                           (-128, -1), (-81, -252), (252, -55), (86, 8),
                           (275, 52), (-148, 196), (22, 109), (-226, 207),
                           (190, 103), (-12, 229), (245, 285), (-232, 93)],
                          [(-295, -149), (41, -214), (206, -123), (295, -40),
                           (-27, 202), (-70, 72), (116, 226), (-179, 203),
                           (-154, -199), (-90, -75), (220, 38), (282, 192),
                           (223, -47), (224, 122), (75, -12), (-90, 277),
                           (-272, 194), (154, -254), (-193, -4), (-248, 105)],
                          [(-57, -149), (232, -232), (162, -246), (-142, -6),
                           (-277, -262), (112, 89), (-3, 258), (-133, -253),
                           (-247, 76), (97, 15), (-16, 8), (-160, -165),
                           (-261, 190), (90, 271), (169, -3), (209, 189),
                           (237, 292), (276, -112), (-275, -181), (-249, 286)],
                          [(29, -29), (-272, -45), (-227, 188), (-59, 297),
                           (-233, -296), (194, -168), (217, 240), (-24, 206),
                           (164, 123), (-123, -100), (11, -237), (174, -27),
                           (-299, 117), (293, 237), (285, -46), (97, 224),
                           (175, -280), (92, -172), (-161, 78), (-43, -33),
                           (-176, 0), (298, -158)],
                          [(201, -35), (-159, 195), (-199, 124), (-216, -11),
                           (135, 283), (-21, -8), (194, -250), (87, 69),
                           (-110, -90), (9, 71), (-240, -281), (32, -242),
                           (220, 198), (290, 285), (-297, 102), (271, -206),
                           (-145, -177), (29, -132), (-90, 266), (-78, 192),
                           (-98, 43), (248, 54)],
                          [(119, -64), (292, -84), (-96, -37), (-2, -216),
                           (23, 144), (-84, -111), (131, 174), (101, 291),
                           (71, -257), (-45, 215), (205, 239), (-277, -209),
                           (-161, 149), (-250, 175), (261, 6), (268, -201),
                           (-244, -61), (-288, 98), (3, -36), (81, 32),
                           (-157, 284), (-62, -295)],
                          [(108, 131), (32, -270), (136, 21), (296, -112),
                           (-119, 240), (177, 234), (-240, 29), (-246, 116),
                           (-71, -128), (-203, 209), (114, -160), (198, 111),
                           (8, 284), (14, 158), (-140, -277), (260, 194),
                           (-284, -248), (201, -289), (208, -91), (-167, -130),
                           (-165, 35), (97, 223), (-210, -284), (-31, -58)],
                          [(-2, 200), (253, -42), (-202, 0), (21, -223),
                           (-20, -84), (-93, 176), (247, 65), (-214, 100),
                           (-197, -141), (113, 207), (-165, 256), (193, -150),
                           (-84, -219), (268, 244), (-99, 94), (-18, 110),
                           (144, -246), (41, -8), (-294, -177), (-270, 293),
                           (-293, -268), (170, -79), (-100, -148), (-96, -21)],
                          [(205, 99), (-136, -138), (127, 24), (-255, 15),
                           (63, -293), (57, -35), (-25, 285), (179, -211),
                           (94, -149), (269, -282), (84, 125), (-164, 24),
                           (-276, 99), (-221, -149), (-268, -60), (129, 200),
                           (-20, 171), (-25, -47), (-63, -195), (-183, -265),
                           (-205, 140), (-138, 225), (-90, 38), (208, -138)],
                          [(99, -3), (-263, -7), (-243, 260), (78, -266),
                           (-25, 90), (267, 176), (209, -19), (-156, -230),
                           (184, 87), (-14, -46), (-266, -211), (107, 172),
                           (-145, -43), (-140, 178), (-168, 54), (278, -255),
                           (221, 285), (49, -164), (148, 262), (-290, -126),
                           (-4, 161), (-238, 143), (59, -93), (-51, 269),
                           (-249, -300), (182, -272)],
                          [(-284, 24), (186, -268), (296, 32), (-298, 188),
                           (174, 297), (25, 186), (270, -104), (-44, -73),
                           (119, 12), (39, -206), (46, 66), (-77, 137),
                           (247, -185), (-271, 275), (-51, -2), (-138, 57),
                           (-45, 235), (-296, -259), (-221, -83), (199, -24),
                           (299, 298), (-78, -219), (193, 203), (112, 175),
                           (-214, -177), (-216, -258)],
                          [(-218, -257), (249, -211), (-265, 77), (-241, 172),
                           (160, -87), (-111, -9), (-154, -117), (176, 67),
                           (27, -133), (236, 285), (-143, 132), (261, 88),
                           (153, -280), (112, 227), (78, 9), (160, -161),
                           (-252, 257), (8, 232), (-63, -142), (-226, -106),
                           (-194, 47), (87, 129), (-110, -292), (-134, 209),
                           (193, 208), (241, -71)],
                          [(156, -267), (-40, 135), (78, -51), (239, 23),
                           (-153, -84), (-275, 27), (-224, -125), (-47, 24),
                           (-15, -214), (-38, 248), (295, -146), (-144, -239),
                           (132, 221), (-289, -50), (-111, 246), (230, 255),
                           (-215, 162), (140, 139), (-265, -232), (-169, 24),
                           (-64, -136), (84, -203), (187, -103), (41, 118),
                           (-242, 287), (222, -189), (162, 68), (6, -99)],
                          [(11, -8), (284, -29), (-241, -204), (190, 42),
                           (-186, 57), (-2, -137), (251, -123), (205, -254),
                           (53, 290), (-21, 232), (178, 200), (28, 140),
                           (-216, 293), (91, -129), (-104, -84), (-296, 269),
                           (80, -271), (-243, -108), (-300, -285), (270, 60),
                           (-122, -167), (-133, 156), (-137, 262), (248, 175),
                           (-42, -230), (112, -51), (-150, -267), (-85, -8)],
                          [(-14, 185), (149, -245), (-197, -199), (-287, -178),
                           (175, 145), (185, 219), (179, -139), (4, -123),
                           (75, -84), (-204, 254), (-211, -60), (259, 167),
                           (13, 297), (-278, 13), (59, 186), (65, 88),
                           (-40, -35), (249, 294), (266, -173), (-149, 90),
                           (283, -54), (-244, 123), (-89, 242), (231, -259),
                           (45, -234), (-25, -284), (-264, -292), (98, 265)]],
                 'practice': [[(109, -63), (-79, 30), (61, 222), (294, 67)],
                              [(-299, 147), (263, 110), (149, -280),
                               (69, -274)],
                              [(-243, -75), (249, 194), (-245, 237),
                               (-153, 99), (206, 105), (231, -184)],
                              [(-87, 85), (-101, -204), (52, -69), (-177, -2),
                               (3, -150), (-71, 177)]]}}
timeout = 120

# STIMULUS GENERATION: DO NOT UNCOMMENT ---------------------------------------
# from itertools import repeat
# import random
# import numpy as np
# from pygame import Rect
#
# def gen_symbols(n):
#     s = 'x' * (n/2)
#     s += 'c' * (n/2)
#     s = ''.join(random.sample(s,len(s)))
#     if len(s) == n - 1:
#         s += 'xc'[np.random.randint(0, 2)]
#     elif len(s) == n + 1:
#         s = s[:-1]
#     return s
#
# def gen_positions(n):
#     rects = []
#     for i in xrange(n):
#         ok = False
#         while not ok:
#             ok = True
#             a, b = np.random.randint(-300, 300, 2)
#             rect = Rect(a, b, 70, 70)
#             if rect.collidelist(rects) != -1:
#                 ok = False
#         rects.append(rect)
#     return [(r.left, r.top) for r in rects]
#
# symbols = {}
# positions = {}
# for condition in conditions:
#     symbols[condition] = {}
#     positions[condition] = {}
#     for phase in ['practice', 'test']:
#         symbols[condition][phase] = []
#         positions[condition][phase] = []
#         if phase == 'practice':
#             if condition != 'sequence':
#                 _ns = [2, 2]
#             else:
#                 _ns = [2, 2, 3, 3]
#         else:
#             _ns = ns
#         for n in _ns:
#             print condition, phase, n
#             if condition != 'sequence':
#                 s = 'c' * n
#             else:
#                 s = gen_symbols(n)
#             symbols[condition][phase].append(s)
#             positions[condition][phase].append(gen_positions(2*n))
# print positions
# -----------------------------------------------------------------------------

def control_method(proband_id, instructions):
    """
    Generates a control list.
    """
    control = []
    for condition in conditions:
        for phase in ['practice', 'test']:
            if phase == 'practice':
                if condition != 'sequence':
                    _ns = [2, 2]
                else:
                    _ns = [2, 2, 3, 3]
            else:
                _ns = ns
            for trialn, n in enumerate(_ns):
                trial_info = (
                    proband_id,
                    test_name,
                    condition,
                    phase,
                    trialn,
                    n,
                    repr(positions[condition][phase][trialn]),
                    symbols[condition][phase][trialn]
                )
                control.append(trial_info)
    for c in control:
        print c
    return control


def trial_method(screen, instructions, trial_info):
    """
    Runs a single trial of the test.
    """
    _, _, condition, phase, trialn, n, positions, symbols = trial_info

    # figure out what the correct responses should be
    if condition == 'forward':
        correct_order = range(n)
    elif condition == 'sequence':
        correct_order = [i for i, v in enumerate(symbols) if v == 'c'] \
                        + [i for i, v in enumerate(symbols) if v == 'x']
    else:
        correct_order = None

    # display instructions
    if trialn == 0:
        ix = conditions.index(condition) * 2
        if phase == 'test':
            ix += 1
        keydown = screen.splash(instructions[ix], mouse=True)
        if keydown == 'EXIT':
            return 'EXIT'

    # wipe screen
    screen.wipe(force_hide_mouse=True)

    # draw squares
    s = 70
    pos = eval(positions)
    squares = [visual.Rect(x + screen.x0, y + screen.y0, s, s) for x, y in pos]

    # blit and pause
    [screen.blit_rectangle(rect) for rect in squares]
    screen.update()
    events.wait(pre_trial_dur)

    # play study sequence
    fdic = {
        'c': data.pj(data.VISUAL_PATH, test_name, 'c.png'),
        'x': data.pj(data.VISUAL_PATH, test_name, 'x.png')
    }
    markers = []
    for i in xrange(n * 2):
        square = squares[i]
        if i < n:
            f = fdic[symbols[i]]
            x, y = (square.left + s / 9, square.top + s / 9)
            _, r = screen.blit_image(f, (x, y), update=False, prc=False)
            markers.append(r)

            if 'simultaneous' not in condition:
                screen.update()
                events.wait(study_dur)
                screen.wipe(r, force_hide_mouse=True, update=False, prc=False)
                screen.update()
                events.wait(wipe_dur)
    screen.update()
    events.wait(pre_trial_dur / 2)
    screen.wipe()
    screen.update()
    events.wait(pre_trial_dur / 2)
    screen.wipe()
    [screen.blit_rectangle(rect) for rect in squares]
    screen.update()
    screen.reset_zones()
    screen.create_rect_zones(squares)
    screen.reset_mouse_pos()
    trial_clock = events.Clock()
    trial_clock.tick_busy_loop()
    responses = []
    corcount = 0

    # wait for a responses
    for i in xrange(n):

        # record response
        mouse_click = events.wait_for_valid_mouse_click(screen, None)
        if mouse_click == 'EXIT':
            return 'EXIT'
        j, rt, button = mouse_click
        responses.append((j, rt))
        square = squares[j]

        # check if response is correct
        corr = 0  # assume it's wrong; cuts down the code
        if condition != 'simultaneous':
            if correct_order[i] == j:
                corr = 1
        else:
            if j in range(n) and j not in [rsp[0] for rsp in responses[:-1]]:
                corr = 1

        # correct response
        if corr == 1:
            corcount += 1
            if phase == 'practice':
                clr = visual.GREEN
            else:
                clr = visual.BLUE
        else:
            clr = visual.RED

        screen.blit_rectangle(square, clr, alpha=100)
        if phase == 'practice':
            audio.play_feedback(corr)
            wt = events.DEFAULT_ITI_FEEDBACK
        else:
            wt = events.DEFAULT_ITI_NOFEEDBACK
        screen.update()
        events.wait(wt)
        screen.wipe(square, update=False, prc=False)
        screen.blit_rectangle(square)
        screen.update()

        # incorrect response
        if corr == 0:
            break

    # end of trial
    trial_info = tuple(
        list(trial_info) + [
            corr, trial_clock.tick_busy_loop(),
            repr(responses), responses[0][1]
        ]
    )
    return trial_info


def summary_method(data_obj, instructions):
    """
    Computes these summary stats:

    [condition]_[n]_ncorrect : Number of trials correct (maximum = 3).
    [condition]_k33 : Largest n for which at least 1 trial was correct.
    [condition]_k66 : Largest n for which at least 2 trials were correct.
    [condition]_k100 : Largest n for which 3 trials were correct.

    [condition]_[n]_rtmean : Mean RT to complete a trial.
    [condition]_rtmean : As above.
    [condition]_[n]_rtmean_first : Mean RT to make first response.
    [condition]_rtmean_first : As above.

    """
    df = data_obj.to_df()
    print df
    dic = {}
    for condition in conditions:
        for n in ns:
            print condition, n
            m = (df.condition == condition) & (df.n == n) & (df.correct == 1)
            _df = df[m]
            ncorrect = len(_df)
            dic ['%s_%i_ncorrect' % (condition, n)] = ncorrect
            if ncorrect >= 1:
                dic['%s_k33' % condition] = n
            if ncorrect >= 2:
                dic['%s_k66' % condition] = n
            if ncorrect == 3:
                dic['%s_k100' % condition] = n
            dic['%s_%i_rtmean' % (condition, n)] = _df.rt.mean()
            dic['%s_%i_rtmean_first' % (condition, n)] = \
                _df.rt_first.mean()
        m = (df.condition == condition) & (df.correct == 1)
        _df = df[m]
        dic['%s_rtmean' % condition] = _df.rt.mean()
        dic['%s_rtmean_first' % condition] = _df.rt_first.mean()
    stats = summaries.get_universal_stats(data_obj)
    stats += [it for it in dic.iteritems()]
    df = summaries.make_df(stats)
    print '---Here are the summary stats:'
    print df.T
    return df


def stopping_rule(data):
    """
    Returns True if all three of the trials of a given n were incorrect.
    """
    df = data.to_df()
    current_trial = df.tail(1)
    if current_trial.phase.values[0] == 'test':
        df = df[
            (df.phase == current_trial.phase.values[0]) & \
            (df.condition == current_trial.condition.values[0]) & \
            (df.n == current_trial.n.values[0])
            ]
        if len(df) == 3 and len(df[df.correct == 1]) == 0:
            return True


if __name__ == '__main__':

    batch.run_single_test(test_name)
